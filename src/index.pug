doctype html

mixin slide-title(title, subtitle)
  slide.slide-title.container-fluid
    .row
      .col-md-12
        .box.text-center
          if title
            h1= title
          if subtitle
            h2= subtitle

mixin slide(title, subtitle)
  slide.container-fluid
    if title || subtitle
      .row
        .col-md-12
          .box.text-center
            if title
              h1= title
            if subtitle
              h2= subtitle
    .row.row-stretch.sm-margin-top
      block

mixin slide-column(classes=['col-md-12'])
  div(class=classes)
    .box
      block

html(ng-app="PythonWorkshop",lang="en")
  head
    title Python workshop
    meta(charset="UTF-8")
    link(rel="stylesheet",href="//maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css")
    link(rel="stylesheet",href="//opensource.keycdn.com/fontawesome/4.6.3/font-awesome.min.css")
    link(rel="stylesheet",href="//fonts.googleapis.com/css?family=Roboto:400,500,600,800")

    script(src="//ajax.googleapis.com/ajax/libs/angularjs/1.5.6/angular.min.js")
    script(src="//ajax.googleapis.com/ajax/libs/angularjs/1.5.6/angular-animate.min.js")

    script(src="vendor/angular-slidedeck/angular-slidedeck.min.js")
    link(rel="stylesheet",href="vendor/angular-slidedeck/angular-slidedeck.min.css")

    link(rel="stylesheet",href="//cdnjs.cloudflare.com/ajax/libs/highlight.js/9.3.0/styles/tomorrow-night.min.css")

    // initialize angular (your own js and css)
    script(src="index.js")
    link(rel="stylesheet",href="index.css")

  body(ng-cloak)
    slides

      +slide('Python workshop', 'Professional scientific software development')
        +slide-column(['col-md-offset-3', 'col-md-6'])
          .text-center
            a(href="https://andre.gaul.io")
              img(src="img/andre.jpg",style="max-width: 90px").img-circle
            p AndrÃ© Gaul
            p
              a(href="https://twitter.com/andrenarchy") @andrenarchy
            p
              a(href="https://paperhive.org")
                img(src="img/paperhive.svg",style="height: 1em")
            p.tiny.text-muted Slides:<br> #[a(href="https://andrenarchy.github.io/2016-08-02-python/") andrenarchy.github.io/2016-08-02-python/]

      +slide('Why Python?')
        +slide-column(['col-md-8', 'col-md-offset-2'])
          ul
            li Universal programming language
            li Readable source code
            li Highly extendable via modules
            li Batteries included for common tasks
            li Large community
            li Free software
            li Can integrate C/C++ or Fortran code (via Cython)

      +slide('History of Python')
        +slide-column(['col-md-8', 'col-md-offset-2'])
          ul
            li 1989: developed by Guido van Rossum as a hobby project on Christmas
            li 1994: Python 1.0
            li 2000: Python 2.0
            li 2008: Python 3.0, backwards-incompatible release
            li 2010: Python 2.7, last release of Python 2
            li 2015: Python 3.5, matrix multiplication operator #[code @]
            li ...
          p In this workshop: #[strong Python 3.5]

      +slide-title('Set up Python', 'Get your dev environment up and running')

      +slide('Python setup', 'Install python and standard modules')
        +slide-column(['col-md-6'])
          h3 Linux
          pre.code-small
            code.hljs
              :highlight(lang="bash")
                # python3
                sudo apt-get install python3 python3-pip \
                  python3-numpy python3-scipy python3-matplotlib \
                  python3-dev build-essential

                # let pip install packages to your home
                # (add ~/.pyvirt3/bin to your PATH)
                virtualenv -p python3 --system-site-packages ~/.pyvirt3

                # install important packages
                pip3 install ipython jupyter pep8 matplotlib2tikz
        +slide-column(['col-md-6'])
          h3 Mac OS X, Windows
          p Install #[a(href="https://www.continuum.io/downloads") Anaconda]

      +slide('Python setup', 'Verify installation')
        +slide-column(['col-md-6', 'col-md-offset-3'])
          pre
            code.hljs
              :highlight(lang="bash")
                python3 --version
                # Python 3.5.2

                ipython3 --version
                # 5.0.0

      +slide('Python setup', 'Text editor')
        +slide-column
          ul
            li Use what ever text editor you like ðŸ˜ƒ
            li I use #[a(href="https://atom.io/") atom] and recommend the following packages:
              ul
                li autocomplete-python
                li language-python
                li linter-pep8

      +slide-title('Python basics', 'Introduction to the Python language')

      +slide('Python basics', 'Hello world')
        +slide-column
          pre
            code.hljs
              :highlight(lang="python")
                print("Hello world!")

                a = 1337
                print("a = {0}".format(a))

                a = "h3ll0"
                print(a)

      +slide('Python basics', 'Lists')
        +slide-column
          pre
            code.hljs
              :highlight(lang="python")
                # a list
                b = [1, 2, 3, "this is a string"]
                print(b[0]) # 2 (zero-based indices)

                # indentation defines code blocks
                for el in b:
                    print(el)

                # list comprehension
                squares = [x**2 for x in range(4)] # [0, 1, 4, 9]

      +slide('Python basics', 'Dictionaries')
        +slide-column
          pre
            code.hljs
              :highlight(lang="python")
                # dictionary with string keys
                ages = {'alice': 28, 'bob': 32}

                print(ages['bob']) # 32

                # dictionary with non-string keys (here: tuples)
                d = { (1,2): True, (4,3): False }

      +slide('Python basics', 'Functions')
        +slide-column
          pre
            code.hljs
              :highlight(lang="python")
                # can be defined everywhere!
                def fak(n):
                    result = 1
                    for i in range(1,n+1):
                        result *= i
                    return result

                print(fak(3)) # 6

      +slide('Python basics', 'Functions â€“ arguments')
        +slide-column(['col-md-6'])
          pre
            code.hljs
              :highlight(lang="python")
                # arguments with default values
                def gmres(A, b, tol=1e-8, maxit=None):
                    if maxit is None:
                        maxit = b.shape[0]

                    # work...
        +slide-column(['col-md-6'])
          pre
            code.hljs
              :highlight(lang="python")
                # optional arguments omitted
                gmres(A, b)

                # optional argument by position
                gmres(A, b, 1e-12)

                # optional argument by name
                gmres(A, b, maxit=20)

      +slide('Python basics', 'Functions â€“ return values')
        +slide-column(['col-md-6'])
          pre
            code.hljs
              :highlight(lang="python")
                # multiple return values
                def gmres(A, b):
                    # work...

                    return x, residual
        +slide-column(['col-md-6'])
          pre
            code.hljs
              :highlight(lang="python")
                # assign return values to variables
                x, residual = gmres(A, b)

                # ignore the residual
                x, _ = gmres(A, b)

      +slide('Python basics', 'Lambda functions')
        +slide-column
          pre
            code.hljs
              :highlight(lang="python")
                def filter(numbers, test):
                    return [x for x in numbers if test(x)]

                print(filter([1, 23, 42], lambda x: x < 40)) # [1, 23]

      +slide('Python basics', 'Classes')
        +slide-column(['col-md-6'])
          pre
            code.hljs
              :highlight(lang="python")
                # class definition
                class LinearSystem:
                    # constructor
                    def __init__(self, A, b):
                        self.A = A
                        self.b = b

                    # class method
                    def getResidual(self, x):
                        return self.b - self.A @ x
        +slide-column(['col-md-6'])
          pre
            code.hljs
              :highlight(lang="python")
                # instanciate class
                ls = LinearSystem(A, b)

                # run method on instance
                ls.getResidual(x)

      +slide('Python basics', 'Modules')
        +slide-column(['col-md-6'])
          pre
            code.hljs
              :highlight(lang="python")
                # utils.py
                class LinearSystem:
                    # constructor
                    def __init__(self, A, b):
                        self.A = A
                        self.b = b

                    # class method
                    def getResidual(self, x):
                        return self.b - self.A @ x
        +slide-column(['col-md-6'])
          pre
            code.hljs
              :highlight(lang="python")
                # solve.py
                from numpy.random import rand
                from numpy.linalg import solve

                from utils import LinearSystem

                ls = LinearSystem(rand(10, 10),
                                  rand(10, 1))
                x = solve(ls.A, ls.b)
                print(ls.getResidual(x))

      +slide('Python basics', 'Modules')
        +slide-column
          .text-center
            a(href="http://xkcd.com/353/").text-center
              img(src="img/xkcd-python-1.png",style="height: 250px")

      +slide('Python basics', 'Modules')
        +slide-column
          .text-center
            a(href="http://xkcd.com/353/")
              img(src="img/xkcd-python-2.png",style="height: 250px")

      +slide-title('Scientific Python', 'NumPy, SciPy, matplotlib, jupyter and FEniCS')

      +slide('NumPy', 'Basics for numerical computations')
        +slide-column
          p Core data type: #[code array] (vector, matrix, n-dim tensor)
          pre
            code.hljs
              :highlight(lang="python")
                from numpy import array

                v1 = array([1, 2])   # vector, 1-dim, shape (2,)
                v2 = array([[1],
                            [2]])    # vector, 2-dim, shape (2, 1)
                A = array([[1, 2],
                           [3, 4]])  # matrix, 2-dim, shape (2, 2)
                x = A @ v1

      +slide('NumPy', 'Basics for numerical computations')
        +slide-column(['col-md-6'])
          p Create arrays
          pre
            code.hljs
              :highlight(lang="python")
                from numpy import diag, eye, ones, zeros
                from numpy.random import rand

                D = diag([1, 2 ,3])
                I = eye(10)
                v = ones(10)
                A = zeros((10, 5))
                z = rand(10, 10)
        +slide-column(['col-md-6'])
          p Indexing and slicing
          pre
            code.hljs
              :highlight(lang="python")
                from numpy.random import rand
                v = rand(10, 5)

                v[0, :]   # first row
                v[:2, :]  # first 2 rows
                v[-2:, :] # last 2 rows

      +slide('NumPy', 'Common numpy submodules')
        +slide-column
          ul
            li #[code numpy.linalg: norm, solve, eig, svd, qr, ...]
            li #[code numpy.random: rand, poisson, normal, ...]
            li #[code numpy.polynomial: chebyshev, legendre, ...]
            li #[code numpy.fft:] discrete fourier transform
            li full list: #[a(href="http://docs.scipy.org/doc/") NumPy docs]

      +slide('SciPy', 'Scientific computing module')
        +slide-column
          p Advanced numerical algorithms and data structures
          ul
            li #[code scipy.linalg: lu, hessenberg, schur, ...]
            li #[code scipy.sparse: csr, csc, coo, ...]
            li #[code scipy.sparse.linalg: norm, cg, gmres, eigs, svds, splu, ...]
            li #[code scipy.optimize: newton, broyden, lp, ...]
            li #[code scipy.integrate: quad, odeint, ...]
            li full list: #[a(href="http://docs.scipy.org/doc/scipy/reference/") SciPy docs]

      +slide('matplotlib', '2D high quality plotting')
        +slide-column
          p See #[a(href="http://matplotlib.org/gallery.html") matplotlib gallery]
          p Demo from #[a(href="http://krypy.readthedocs.io/en/latest/") krypy docs]

      +slide('matplotlib2tikz', 'Beautiful plots for LaTeX')
        +slide-column
          pre
            code.hljs
              :highlight(lang="python")
                # plot with matplotlib
                # ...

                # save as tex
                from matplotlib2tikz import save as tikz_save
                tikz_save('test.tex')

      +slide('matplotlib2tikz', 'Beautiful plots for LaTeX')
        +slide-column(['col-md-6'])
          .text-center
            a(href="https://dx.doi.org/10.14279/depositonce-4147")
              img(src="img/matplotlib-ritz.png",style="height: 250px")
        +slide-column(['col-md-6'])
          .text-center
            a(href="https://dx.doi.org/10.14279/depositonce-4147")
              img(src="img/matplotlib-minres.png",style="height: 250px")

      +slide('jupyter notebook', 'Living code, visualizations and text')
        +slide-column
          ul
            li Python in your browser!
            li Ideal for numerical experiments
            li Just run #[code jupyter notebook]

      +slide-title('Continuous integration', 'Unit tests, linting and code coverage')

      +slide-title('Documentation', 'Read the docs')

      +slide('Further resources')
        +slide-column
          ul
            li #[a(href="http://learnpythonthehardway.org/") Learn Python the hard way]
            li #[a(href="http://www.scipy-lectures.org/") SciPy lectures]
            li #[a(href="http://getpython3.com/diveintopython3/") Dive into Python 3]

      +slide('Questions?')
